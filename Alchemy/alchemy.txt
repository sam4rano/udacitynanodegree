running a flask app in he command

run     set FLASK_APP=name_of_the_file

then run flask run


Try running this yourself in the terminal.

$ python3
>>> from flask_hello_app import Person, db
>>> Person.query.all()
>>> Person.query.first()
>>> query = Person.query.filter(Person.name == 'Amy')
>>> query.first()
>>> query.all()s



SQLAlchemy models.

In interactive mode, import db and your Person model.

$ cd YOUR_PROJECT_DIRECTORY
$ python3
>>> from flask_hello_app import db, Person
Then, create an instance of a Person, setting its attributes, and setting it equal to a variable person

>>> person = Person(name='Amy')
We're going to call db.session.add(), a method on the Session interface in SQLAlchemy, to add this object to a session,

>>> db.session.add(person)
This will queue up a INSERT INTO persons (name) VALUES ('Amy'); statement in a transaction that is managed by db.session.

We can then call db.session.commit()

>>> db.session.commit()
and that person record will now exist in our persons table, within our database! You can double-check this in psql by running a SELECT * from persons; command from psql.

In summary


SQLAlchemy has its own data types that we should become familiar with. In SQLAlchemy, there is a one-to-one parity between an SQLAlchemy datatype and the data type that would be understandable in the semantics of the particular database system that you're linking your SQLAlchemy engine to.

db.integer, that's the integer type for the database system that we're using.
db.string, where you can optionally pass in a number that represents the maximum length of that string should be. For Postgress in particular, we're able to specify a variable character string, so we can omit the size variable, so that setting db.string with nothing in it, specifies a varchar data fields.
db.text for longer text
db.DateTime for date time objects
floats
Booleans
PickleTypes
large binaries for storing large binary data or pickled Python objects.


We generally don't need to memorize these SQLAlchemy datatypes, but keep this in mind as a reference, as you're figuring out how to define your models in your application.

Resources
Flask-SQLAlchemy: Declaring Models
See some examples including one-many and many-many relationships
Getting Started with PostgreSQL Data Types
Find out more about data types including Boolean, character, numeric, temporal, array, json, uuid, and special types.
Column and Data Types
Use the Flask-SQLAlchemy documentation site to learn about data types generally mapping to SQLAlchemy's library of data types.
SQLAlchemy data types Integer, String, Text, DateTime. Float, Boolean, Pickletype,LargeBinary
SQLAlchemy data types. Source: https://flask-sqlalchemy.palletsprojects.com/en/2.x/models/


Takeaways
Column constraints ensure data integrity across our database, allowing for database accuracy and consistency.
Constraints are conditions on your column, that provide checks on the data's validity. It does not allow data that violates constraints to be inserted into the database (it will raise an error if you attempt to).
In SQLAlchemy, constraints are set in db.Column() after setting the data type.
nullable=False is equivalent to NOT NULL in SQL
unique=True is equivalent to UNIQUE in SQL


Lesson review
In this lesson, we introduced SQL Alchemy, theoretically as well as in practice. We looked specifically look at:

How the components of SQL Alchemy and ORM are structured
What are dialects
What is a connection pool
How does the core engine work
How classes and tables are mapped
How models are defined
How data types are handled
How to define constraints


IN terminal

from flask_hello_app import db, Person

Person.query.all()

Person.query.filter_by(name='Amy')

Person.query

Person.query.filter_by(name='Amy').all()

results = Person.query.filter_by(name='Amy').all()

results[0].id

person = Person(name='Bob 2')

db.session.add(person)

db.session.commit()

Person.query()

person1 = Person(name='New Person 1')

person2 = Person(name='New Person 2')

db.session.add_all([person1],[person2])

db.session.commit()

Person.query()

exit()




Takeaways
db.Model.query offers us the Query object. The Query object lets us generate SELECT statements that let us query and return slices of data from our database.
Query allows method chaining. You can chain query methods to another (indefinitely), getting back more query objects, until you chain it with a terminal method that returns a non-query object like count(), all(), first(), delete(), etc.
The Query object can be accessed on a model using either:
MyModel.query directly on the model, or
db.session.query(MyModel) using db.session.query instead.
Query Methods
Here are some useful query methods to get to know.

Select records
all()
MyModel.query.all()
same as doing a SELECT *, fetching all records from the model's table. Returns a list of objects.

first()
MyModel.query.first()
Fetches just the first result. Returns either None or an object if found.

Filtering
filter_by
MyModel.query.filter_by(my_table_attribute='some value')
Similar to doing a SELECT * from ... WHERE SQL statement for filtering data by named attributes.

filter
Examples:

MyModel.query.filter(MyOtherModel.some_attr='some value')
OrderItem.query.filter(Product.id=3)
Similar to filter_by, but instead, you specify attributes on a given Model. It is more flexible than using filter_by itself, and is especially useful when querying from a joined table where you want to filter by attributes that span across multiple models.

Wait.. there's more to filtering!
You can filter on equality, inequality, like filtering ("fuzzy" string matching), IN, NOT IN, NULL, NOT NULL, etc. Be sure to check out the SQLAlchemy docs reference on common filter operators here.

Ordering
order_by
MyModel.order_by(MyModel.created_at)
MyModel.order_by(db.desc(MyModel.created_at))
To order the results by a given attribute. Use db.desc to order in descending order.

limit
Order.query.limit(100).all()
limit(max_num_rows) limits the number of returned records from the query. ala LIMIT in SQL.

Aggregates
count()
Example:

query = Task.query.filter(completed=True)
query.count()
Returns an integer set to the number of records that would have been returned by running the query.

get()
Get object by ID

model_id = 3
MyModel.query.get(model_id)
Returns the object as a result of querying the model by its primary key.

Bulk Deletes
Example:

query = Task.query.filter_by(category='Archived')
query.delete()
delete() does a bulk delete operation that deletes every record matching the given query.

Joined Queries
Example:

Driver.query.join('vehicles')
Query has a method join(<table_name>) for joining one model to another table.

Get this cheat sheet!
Click here to access a cheat sheet of handy SQLAlchemy Query methods to use.

Handy resources
Docs for the SQLAlchemy Query API
